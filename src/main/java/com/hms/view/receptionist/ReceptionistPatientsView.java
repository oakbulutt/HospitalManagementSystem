package com.hms.view.receptionist;

import com.hms.model.Patient;
import com.hms.service.HMSService;
import java.sql.Date;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class ReceptionistPatientsView extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    HMSService service = new HMSService();

    public ReceptionistPatientsView() {
        initComponents();
        model = (DefaultTableModel) receptionistPatientTable.getModel();
        showPatients();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        receptionistPatientsSearchTextField = new javax.swing.JTextField();
        receptionistPatientsIdLabel = new javax.swing.JLabel();
        receptionistPatientsIdTextField = new javax.swing.JTextField();
        receptionistPatientsPhoneTextField = new javax.swing.JTextField();
        receptionistPatientsEmailTextField = new javax.swing.JTextField();
        receptionistPatientsSurnameTextField = new javax.swing.JTextField();
        receptionistPatientsNameTextField = new javax.swing.JTextField();
        receptionistPatientsNameLabel = new javax.swing.JLabel();
        receptionistPatientsSurnameLabel = new javax.swing.JLabel();
        receptionistPatientsEmailLabel = new javax.swing.JLabel();
        receptionistPatientsPhoneLabel = new javax.swing.JLabel();
        receptionistPatientsBirthdateLabel = new javax.swing.JLabel();
        receptionistPatientsDeleteButton = new javax.swing.JButton();
        receptionistPatientsUpdateButton = new javax.swing.JButton();
        receptionistPatientsAddButton = new javax.swing.JButton();
        receptionistPatientsGenderComboBox = new javax.swing.JComboBox<>();
        receptionistPatientsGenderLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        receptionistPatientTable = new javax.swing.JTable();
        receptionistPatientsDateChooser = new com.toedter.calendar.JDateChooser();
        receptionistPatientClear = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Patients");

        receptionistPatientsSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                receptionistPatientsSearchTextFieldKeyReleased(evt);
            }
        });

        receptionistPatientsIdLabel.setText("ID                   :");

        receptionistPatientsNameLabel.setText("Name              :");

        receptionistPatientsSurnameLabel.setText("Surname         :");

        receptionistPatientsEmailLabel.setText("E-Mail             :");

        receptionistPatientsPhoneLabel.setText("Phone            :");

        receptionistPatientsBirthdateLabel.setText("Birthdate      :");

        receptionistPatientsDeleteButton.setText("Delete");
        receptionistPatientsDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receptionistPatientsDeleteButtonActionPerformed(evt);
            }
        });

        receptionistPatientsUpdateButton.setText("Update");
        receptionistPatientsUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receptionistPatientsUpdateButtonActionPerformed(evt);
            }
        });

        receptionistPatientsAddButton.setText("Add");
        receptionistPatientsAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receptionistPatientsAddButtonActionPerformed(evt);
            }
        });

        receptionistPatientsGenderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Gender", "Male", "Female" }));

        receptionistPatientsGenderLabel.setText("Gender         :");

        receptionistPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Gender", "Birthdate", "E-mail", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        receptionistPatientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receptionistPatientTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(receptionistPatientTable);

        receptionistPatientsDateChooser.setDateFormatString("yyyy-MM-dd");

        receptionistPatientClear.setText("Clear");
        receptionistPatientClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receptionistPatientClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(receptionistPatientsSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(receptionistPatientsSurnameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(receptionistPatientsNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receptionistPatientsIdLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(receptionistPatientsIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receptionistPatientsNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receptionistPatientsSurnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(receptionistPatientsAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(receptionistPatientsUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(receptionistPatientsDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(receptionistPatientClear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(receptionistPatientsGenderLabel)
                                    .addComponent(receptionistPatientsBirthdateLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(receptionistPatientsGenderComboBox, 0, 150, Short.MAX_VALUE)
                                    .addComponent(receptionistPatientsDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(receptionistPatientsEmailLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(receptionistPatientsEmailTextField))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(receptionistPatientsPhoneLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(receptionistPatientsPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(receptionistPatientsSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(receptionistPatientsIdLabel)
                    .addComponent(receptionistPatientsIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receptionistPatientsGenderLabel)
                    .addComponent(receptionistPatientsGenderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receptionistPatientsPhoneLabel)
                    .addComponent(receptionistPatientsPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(receptionistPatientsNameLabel)
                        .addComponent(receptionistPatientsNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(receptionistPatientsBirthdateLabel)
                        .addComponent(receptionistPatientsEmailLabel)
                        .addComponent(receptionistPatientsEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(receptionistPatientsDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(receptionistPatientsSurnameLabel)
                    .addComponent(receptionistPatientsSurnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receptionistPatientsAddButton)
                    .addComponent(receptionistPatientsUpdateButton)
                    .addComponent(receptionistPatientsDeleteButton)
                    .addComponent(receptionistPatientClear))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void receptionistPatientsSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_receptionistPatientsSearchTextFieldKeyReleased
        String search = receptionistPatientsSearchTextField.getText();
        dinamicSearch(search);
    }//GEN-LAST:event_receptionistPatientsSearchTextFieldKeyReleased

    private void receptionistPatientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receptionistPatientTableMouseClicked
        int selectedRow = receptionistPatientTable.getSelectedRow();

        receptionistPatientsIdTextField.setText(model.getValueAt(selectedRow, 0).toString());
        receptionistPatientsNameTextField.setText(model.getValueAt(selectedRow, 1).toString());
        receptionistPatientsSurnameTextField.setText(model.getValueAt(selectedRow, 2).toString());
        receptionistPatientsGenderComboBox.setSelectedItem(model.getValueAt(selectedRow, 3).toString());
        receptionistPatientsDateChooser.setDate((Date) model.getValueAt(selectedRow, 4));
        receptionistPatientsEmailTextField.setText(model.getValueAt(selectedRow, 5).toString());
        receptionistPatientsPhoneTextField.setText(model.getValueAt(selectedRow, 6).toString());
    }//GEN-LAST:event_receptionistPatientTableMouseClicked

    private void receptionistPatientsAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptionistPatientsAddButtonActionPerformed
        String id = receptionistPatientsIdTextField.getText();
        String name = receptionistPatientsNameTextField.getText();
        String surname = receptionistPatientsSurnameTextField.getText();
        String gender = receptionistPatientsGenderComboBox.getSelectedItem().toString();
        Date birthdate = new java.sql.Date(receptionistPatientsDateChooser.getDate().getTime());
        String email = receptionistPatientsEmailTextField.getText();
        String phone = receptionistPatientsPhoneTextField.getText();
        String anamnesis = "";

        service.createPatient(new Patient(id, name, surname, gender, birthdate, email, phone));
        showPatients();
        JOptionPane.showMessageDialog(this, "New Patient has been added!");

        receptionistPatientsIdTextField.setText("");
        receptionistPatientsNameTextField.setText("");
        receptionistPatientsSurnameTextField.setText("");
        receptionistPatientsGenderComboBox.setSelectedItem("Choose Gender");
        receptionistPatientsDateChooser.setDate(null);
        receptionistPatientsEmailTextField.setText("");
        receptionistPatientsPhoneTextField.setText("");
    }//GEN-LAST:event_receptionistPatientsAddButtonActionPerformed

    private void receptionistPatientsUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptionistPatientsUpdateButtonActionPerformed
        String id = receptionistPatientsIdTextField.getText();
        String name = receptionistPatientsNameTextField.getText();
        String surname = receptionistPatientsSurnameTextField.getText();
        String gender = receptionistPatientsGenderComboBox.getSelectedItem().toString();
        Date birthdate = new java.sql.Date(receptionistPatientsDateChooser.getDate().getTime());
        String email = receptionistPatientsEmailTextField.getText();
        String phone = receptionistPatientsPhoneTextField.getText();
        String anamnesis = "";
        int selectedRow = receptionistPatientTable.getSelectedRow();
        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Patient table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select the patient who you want to update.");
            }
        } else {
            Patient patient = new Patient(id, name, surname, gender, birthdate, email, phone, anamnesis);
            service.updatePatient(patient);
            showPatients();
            JOptionPane.showMessageDialog(this, "Patient has been updated!");

            receptionistPatientsIdTextField.setText("");
            receptionistPatientsNameTextField.setText("");
            receptionistPatientsSurnameTextField.setText("");
            receptionistPatientsGenderComboBox.setSelectedItem("Choose Gender");
            receptionistPatientsDateChooser.setDate(null);
            receptionistPatientsEmailTextField.setText("");
            receptionistPatientsPhoneTextField.setText("");
        }
    }//GEN-LAST:event_receptionistPatientsUpdateButtonActionPerformed

    private void receptionistPatientsDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptionistPatientsDeleteButtonActionPerformed
        String id = receptionistPatientsIdTextField.getText();
        String name = receptionistPatientsNameTextField.getText();
        String surname = receptionistPatientsSurnameTextField.getText();
        String gender = receptionistPatientsGenderComboBox.getSelectedItem().toString();
        Date birthdate = new java.sql.Date(receptionistPatientsDateChooser.getDate().getTime());
        String email = receptionistPatientsEmailTextField.getText();
        String phone = receptionistPatientsPhoneTextField.getText();

        int selectedRow = receptionistPatientTable.getSelectedRow();
        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Patient table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select the patient who you want to delete.");
            }
        } else {
            service.deletePatient(id);
            showPatients();
            JOptionPane.showMessageDialog(this, "Patient has been deleted!");

            receptionistPatientsIdTextField.setText("");
            receptionistPatientsNameTextField.setText("");
            receptionistPatientsSurnameTextField.setText("");
            receptionistPatientsGenderComboBox.setSelectedItem("Choose Gender");
            receptionistPatientsDateChooser.setDate(null);
            receptionistPatientsEmailTextField.setText("");
            receptionistPatientsPhoneTextField.setText("");
        }
    }//GEN-LAST:event_receptionistPatientsDeleteButtonActionPerformed

    private void receptionistPatientClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptionistPatientClearActionPerformed
        receptionistPatientsIdTextField.setText("");
        receptionistPatientsNameTextField.setText("");
        receptionistPatientsSurnameTextField.setText("");
        receptionistPatientsGenderComboBox.setSelectedItem("Choose Gender");
        receptionistPatientsDateChooser.setDate(null);
        receptionistPatientsEmailTextField.setText("");
        receptionistPatientsPhoneTextField.setText("");
    }//GEN-LAST:event_receptionistPatientClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton receptionistPatientClear;
    private javax.swing.JTable receptionistPatientTable;
    private javax.swing.JButton receptionistPatientsAddButton;
    private javax.swing.JLabel receptionistPatientsBirthdateLabel;
    private com.toedter.calendar.JDateChooser receptionistPatientsDateChooser;
    private javax.swing.JButton receptionistPatientsDeleteButton;
    private javax.swing.JLabel receptionistPatientsEmailLabel;
    private javax.swing.JTextField receptionistPatientsEmailTextField;
    private javax.swing.JComboBox<String> receptionistPatientsGenderComboBox;
    private javax.swing.JLabel receptionistPatientsGenderLabel;
    private javax.swing.JLabel receptionistPatientsIdLabel;
    private javax.swing.JTextField receptionistPatientsIdTextField;
    private javax.swing.JLabel receptionistPatientsNameLabel;
    private javax.swing.JTextField receptionistPatientsNameTextField;
    private javax.swing.JLabel receptionistPatientsPhoneLabel;
    private javax.swing.JTextField receptionistPatientsPhoneTextField;
    private javax.swing.JTextField receptionistPatientsSearchTextField;
    private javax.swing.JLabel receptionistPatientsSurnameLabel;
    private javax.swing.JTextField receptionistPatientsSurnameTextField;
    private javax.swing.JButton receptionistPatientsUpdateButton;
    // End of variables declaration//GEN-END:variables

    private void showPatients() {
        model.setRowCount(0);
        List<Patient> patients = new LinkedList<>();

        patients = service.showPatients();

        if (patients != null) {
            for (Patient patient : patients) {
                Object[] willAdd = {
                    patient.getId(), patient.getName(),
                    patient.getSurname(), patient.getGender(),
                    patient.getBirthdate(), patient.getEmail(),
                    patient.getPhone()
                };
                model.addRow(willAdd);
            }
        }
    }

    private void dinamicSearch(String search) {
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(model);

        receptionistPatientTable.setRowSorter(tableRowSorter);

        tableRowSorter.setRowFilter(RowFilter.regexFilter(search));
    }
}
