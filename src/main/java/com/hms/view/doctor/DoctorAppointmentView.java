package com.hms.view.doctor;

import com.hms.model.Appointment;
import com.hms.service.HMSService;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class DoctorAppointmentView extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    HMSService service = new HMSService();
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");

    public DoctorAppointmentView() {
        initComponents();
        model = (DefaultTableModel) doctorAppointmentTable.getModel();
        showAppointment();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorAppointmentViewAcceptButton = new javax.swing.JButton();
        doctorAppointmentViewDeleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorAppointmentTable = new javax.swing.JTable();
        doctorAppointmentViewPatientIdLable = new javax.swing.JLabel();
        doctorAppointmentViewPatientNameLabel = new javax.swing.JLabel();
        doctorAppointmentViewPatientSurnameLabel = new javax.swing.JLabel();
        doctorAppointmentViewPatientIdTextField = new javax.swing.JTextField();
        doctorAppointmentViewPatientNameTextField = new javax.swing.JTextField();
        doctorAppointmentViewPatientSurnameTextField = new javax.swing.JTextField();
        doctorAppointmentViewAppointmentDateLabel = new javax.swing.JLabel();
        doctorAppointmentsSearchTextField = new javax.swing.JTextField();
        doctorAppointmentsMessageLabel = new javax.swing.JLabel();
        doctorAppointmentViewAppointmentDateChooser = new com.toedter.calendar.JDateChooser();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Appointments");

        doctorAppointmentViewAcceptButton.setText("Accept Patient");
        doctorAppointmentViewAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorAppointmentViewAcceptButtonActionPerformed(evt);
            }
        });

        doctorAppointmentViewDeleteButton.setText("Delete Appointment");
        doctorAppointmentViewDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorAppointmentViewDeleteButtonActionPerformed(evt);
            }
        });

        doctorAppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "A. ID", "P. ID", "P. Name", "P. Surname", "D. ID", "D. Name", "D.Surname", "D. Department", "A. Date", "A. Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorAppointmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorAppointmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(doctorAppointmentTable);

        doctorAppointmentViewPatientIdLable.setText("Patient ID                 :");

        doctorAppointmentViewPatientNameLabel.setText("Patient Name            :");

        doctorAppointmentViewPatientSurnameLabel.setText("Patient Surname       :");

        doctorAppointmentViewPatientIdTextField.setEditable(false);

        doctorAppointmentViewPatientNameTextField.setEditable(false);

        doctorAppointmentViewPatientSurnameTextField.setEditable(false);

        doctorAppointmentViewAppointmentDateLabel.setText("Appointment Date    :");

        doctorAppointmentsSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doctorAppointmentsSearchTextFieldKeyReleased(evt);
            }
        });

        doctorAppointmentViewAppointmentDateChooser.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(doctorAppointmentViewPatientIdLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(doctorAppointmentViewPatientNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(doctorAppointmentViewPatientIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(doctorAppointmentViewPatientNameTextField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(doctorAppointmentViewAcceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(doctorAppointmentViewDeleteButton)))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(doctorAppointmentViewPatientSurnameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doctorAppointmentViewPatientSurnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(doctorAppointmentViewAppointmentDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doctorAppointmentViewAppointmentDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(doctorAppointmentsSearchTextField)
                    .addComponent(doctorAppointmentsMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(doctorAppointmentsSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorAppointmentViewPatientIdLable)
                    .addComponent(doctorAppointmentViewPatientIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorAppointmentViewPatientSurnameLabel)
                    .addComponent(doctorAppointmentViewPatientSurnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(doctorAppointmentViewPatientNameLabel)
                        .addComponent(doctorAppointmentViewPatientNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(doctorAppointmentViewAppointmentDateLabel))
                    .addComponent(doctorAppointmentViewAppointmentDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorAppointmentViewAcceptButton)
                    .addComponent(doctorAppointmentViewDeleteButton))
                .addGap(9, 9, 9)
                .addComponent(doctorAppointmentsMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doctorAppointmentViewAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorAppointmentViewAcceptButtonActionPerformed
        doctorAppointmentsMessageLabel.setText("");
        int selectedRow = doctorAppointmentTable.getSelectedRow();

        String id = model.getValueAt(selectedRow, 0).toString();
        String patientId = doctorAppointmentViewPatientIdTextField.getText();
        java.sql.Date appointmentDate = new java.sql.Date(doctorAppointmentViewAppointmentDateChooser.getDate().getTime());
        String doctorId = model.getValueAt(selectedRow, 4).toString();
       
        String appointmentStatus = "Accepted";

        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                doctorAppointmentsMessageLabel.setText("Appointment table is empty.");
            } else {
                doctorAppointmentsMessageLabel.setText("Please select the appointment which you want to accept.");
            }
        } else {
            service.updateAppointment(new Appointment(id, patientId, doctorId, appointmentDate, appointmentStatus));
            showAppointment();
            doctorAppointmentsMessageLabel.setText("Appointment is accepted!");
        }
    }//GEN-LAST:event_doctorAppointmentViewAcceptButtonActionPerformed

    private void doctorAppointmentViewDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorAppointmentViewDeleteButtonActionPerformed
        doctorAppointmentsMessageLabel.setText("");
        int selectedRow = doctorAppointmentTable.getSelectedRow();

        String id = model.getValueAt(selectedRow, 0).toString();
        
        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                doctorAppointmentsMessageLabel.setText("Appointment table is empty.");
            } else {
                doctorAppointmentsMessageLabel.setText("Please select the appointment which you want to delete.");
            }
        } else {
            service.deleteAppointment(id);
            showAppointment();
            doctorAppointmentsMessageLabel.setText("Appointment is accepted!");
        }
    }//GEN-LAST:event_doctorAppointmentViewDeleteButtonActionPerformed

    private void doctorAppointmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorAppointmentTableMouseClicked
        int selectedRow = doctorAppointmentTable.getSelectedRow();

        doctorAppointmentViewPatientIdTextField.setText(model.getValueAt(selectedRow, 1).toString());
        doctorAppointmentViewPatientNameTextField.setText(model.getValueAt(selectedRow, 2).toString());
        doctorAppointmentViewPatientSurnameTextField.setText(model.getValueAt(selectedRow, 3).toString());
        doctorAppointmentViewAppointmentDateChooser.setDate((Date) (model.getValueAt(selectedRow, 8)));

    }//GEN-LAST:event_doctorAppointmentTableMouseClicked

    private void doctorAppointmentsSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doctorAppointmentsSearchTextFieldKeyReleased
        String search = doctorAppointmentsSearchTextField.getText();
        dinamicSearch(search);
    }//GEN-LAST:event_doctorAppointmentsSearchTextFieldKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable doctorAppointmentTable;
    private javax.swing.JButton doctorAppointmentViewAcceptButton;
    private com.toedter.calendar.JDateChooser doctorAppointmentViewAppointmentDateChooser;
    private javax.swing.JLabel doctorAppointmentViewAppointmentDateLabel;
    private javax.swing.JButton doctorAppointmentViewDeleteButton;
    private javax.swing.JLabel doctorAppointmentViewPatientIdLable;
    private javax.swing.JTextField doctorAppointmentViewPatientIdTextField;
    private javax.swing.JLabel doctorAppointmentViewPatientNameLabel;
    private javax.swing.JTextField doctorAppointmentViewPatientNameTextField;
    private javax.swing.JLabel doctorAppointmentViewPatientSurnameLabel;
    private javax.swing.JTextField doctorAppointmentViewPatientSurnameTextField;
    private javax.swing.JLabel doctorAppointmentsMessageLabel;
    private javax.swing.JTextField doctorAppointmentsSearchTextField;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void showAppointment() {
        model.setRowCount(0);
        List<Appointment> appointments = new LinkedList<>();

        appointments = service.showAppointments();

        if (appointments != null) {
            for (Appointment appointment : appointments) {
                Object[] willAdd = {
                    appointment.getId(), appointment.getPatientsId(),
                    appointment.getPatientsName(), appointment.getPatientsSurname(),
                    appointment.getDoctorsId(), appointment.getDoctorsName(),
                    appointment.getDoctorsSurname(), appointment.getDoctorsDepartment(),
                    appointment.getAppointmentDate(), appointment.getAppointmentStatus()
                };
                model.addRow(willAdd);
            }
        }
    }

    private void dinamicSearch(String search) {
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(model);

        doctorAppointmentTable.setRowSorter(tableRowSorter);

        tableRowSorter.setRowFilter(RowFilter.regexFilter(search));
    }
}
