package com.hms.view.doctor;

import com.hms.model.Patient;
import com.hms.service.HMSService;
import java.util.*;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class DoctorPatientsView extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    HMSService service = new HMSService();

    public DoctorPatientsView() {
        initComponents();
        model = (DefaultTableModel) doctorPatientTable.getModel();
        showPatient();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorPatientsSearchTextField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        doctorPatientTable = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Patients");

        doctorPatientsSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                doctorPatientsSearchTextFieldKeyReleased(evt);
            }
        });

        doctorPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "Gender", "Birthdate", "E-mail", "Phone", "Anamnesis", "Prescription Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorPatientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorPatientTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(doctorPatientTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(doctorPatientsSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(doctorPatientsSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doctorPatientsSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doctorPatientsSearchTextFieldKeyReleased
        String search = doctorPatientsSearchTextField.getText();
        dinamicSearch(search);
    }//GEN-LAST:event_doctorPatientsSearchTextFieldKeyReleased

    private void doctorPatientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorPatientTableMouseClicked
        // TODO add your handling code here:
//        DoctorPrescriptionView doctorPrescriptionView = new DoctorPrescriptionView();
        
        DoctorsPrescriptionView doctorsPrescriptionView = new DoctorsPrescriptionView();
        doctorsPrescriptionView.setVisible(true);
//        doctorDesktopPane.add(doctorPrescriptionView).setVisible(true);
    }//GEN-LAST:event_doctorPatientTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable doctorPatientTable;
    private javax.swing.JTextField doctorPatientsSearchTextField;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

    private void showPatient() {
        model.setRowCount(0);
        List<Patient> patients = new LinkedList<>();

        patients = service.showPatients();

        if (patients != null) {
            for (Patient patient : patients) {
                Object[] willAdd = {
                    patient.getId(), patient.getName(),
                    patient.getSurname(), patient.getGender(),
                    patient.getBirthdate(), patient.getEmail(),
                    patient.getPhone(), patient.getAnamnesis(),
                    patient.getPrescriptionId()
                };
                    model.addRow(willAdd);
                
            }
        }
    }

    private void dinamicSearch(String search) {
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(model);

        doctorPatientTable.setRowSorter(tableRowSorter);

        tableRowSorter.setRowFilter(RowFilter.regexFilter(search));
    }
}
