package com.hms.view.admin;

import com.hms.model.Receptionist;
import com.hms.service.HMSService;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class AdminReceptionistsView extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    HMSService service = new HMSService();

    public AdminReceptionistsView() {
        initComponents();
        model = (DefaultTableModel) adminReceptionistsTable.getModel();
        showReceptionist();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminReceptionistsSearchTextField = new javax.swing.JTextField();
        adminReceptionistsIdLabel = new javax.swing.JLabel();
        adminReceptionistsIdTextField = new javax.swing.JTextField();
        adminReceptionistsSurnameTextField = new javax.swing.JTextField();
        adminReceptionistsPhoneTextField = new javax.swing.JTextField();
        adminReceptionistsEmailTextField = new javax.swing.JTextField();
        adminReceptionistsNameTextField = new javax.swing.JTextField();
        adminReceptionistsNameLabel = new javax.swing.JLabel();
        adminReceptionistsEmailLabel = new javax.swing.JLabel();
        adminReceptionistsTitleLabel = new javax.swing.JLabel();
        adminReceptionistsPhoneLabel = new javax.swing.JLabel();
        adminReceptionistsDeleteButton = new javax.swing.JButton();
        adminReceptionistsUpdateButton = new javax.swing.JButton();
        adminReceptionistsAddButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        adminReceptionistsTable = new javax.swing.JTable();
        adminReceptionistClear = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Receptionists");

        adminReceptionistsSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                adminReceptionistsSearchTextFieldKeyReleased(evt);
            }
        });

        adminReceptionistsIdLabel.setText("ID                   :");

        adminReceptionistsNameLabel.setText("Name              :");

        adminReceptionistsEmailLabel.setText("E-Mail              :");

        adminReceptionistsTitleLabel.setText("Surname         :");

        adminReceptionistsPhoneLabel.setText("Phone            :");

        adminReceptionistsDeleteButton.setText("Delete");
        adminReceptionistsDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminReceptionistsDeleteButtonActionPerformed(evt);
            }
        });

        adminReceptionistsUpdateButton.setText("Update");
        adminReceptionistsUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminReceptionistsUpdateButtonActionPerformed(evt);
            }
        });

        adminReceptionistsAddButton.setText("Add");
        adminReceptionistsAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminReceptionistsAddButtonActionPerformed(evt);
            }
        });

        adminReceptionistsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Surname", "E-mail", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        adminReceptionistsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminReceptionistsTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(adminReceptionistsTable);

        adminReceptionistClear.setText("Clear");
        adminReceptionistClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminReceptionistClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(adminReceptionistsSearchTextField)
                    .addComponent(jScrollPane6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(adminReceptionistsIdLabel)
                                    .addComponent(adminReceptionistsNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(adminReceptionistsIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(adminReceptionistsNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(adminReceptionistsAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(adminReceptionistsUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(adminReceptionistsDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(adminReceptionistClear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(adminReceptionistsEmailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(adminReceptionistsTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(adminReceptionistsSurnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(adminReceptionistsEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(adminReceptionistsPhoneLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(adminReceptionistsPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33)))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminReceptionistsSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adminReceptionistsIdLabel)
                            .addComponent(adminReceptionistsIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adminReceptionistsNameLabel)
                            .addComponent(adminReceptionistsNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(adminReceptionistsPhoneLabel)
                                .addComponent(adminReceptionistsPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(adminReceptionistsTitleLabel)
                                .addComponent(adminReceptionistsSurnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adminReceptionistsEmailLabel)
                            .addComponent(adminReceptionistsEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adminReceptionistsAddButton)
                        .addComponent(adminReceptionistsUpdateButton))
                    .addComponent(adminReceptionistsDeleteButton)
                    .addComponent(adminReceptionistClear))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void adminReceptionistsSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adminReceptionistsSearchTextFieldKeyReleased
        String search = adminReceptionistsSearchTextField.getText();
        dynamicSearch(search);
    }//GEN-LAST:event_adminReceptionistsSearchTextFieldKeyReleased

    private void adminReceptionistsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminReceptionistsTableMouseClicked
        int selectedRow = adminReceptionistsTable.getSelectedRow();

        adminReceptionistsIdTextField.setText(model.getValueAt(selectedRow, 0).toString());
        adminReceptionistsNameTextField.setText(model.getValueAt(selectedRow, 1).toString());
        adminReceptionistsSurnameTextField.setText(model.getValueAt(selectedRow, 2).toString());
        adminReceptionistsEmailTextField.setText(model.getValueAt(selectedRow, 3).toString());
        adminReceptionistsPhoneTextField.setText(model.getValueAt(selectedRow, 4).toString());
    }//GEN-LAST:event_adminReceptionistsTableMouseClicked

    private void adminReceptionistsAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminReceptionistsAddButtonActionPerformed
        String id = adminReceptionistsIdTextField.getText();
        String name = adminReceptionistsNameTextField.getText();
        String surname = adminReceptionistsSurnameTextField.getText();
        String email = adminReceptionistsEmailTextField.getText();
        String phone = adminReceptionistsPhoneTextField.getText();
        String usersId = id;
        service.createReceptionist(new Receptionist(id, name, surname, email, phone, usersId));
        showReceptionist();
        JOptionPane.showMessageDialog(this, "Receptionist has been Added!");

        adminReceptionistsIdTextField.setText("");
        adminReceptionistsNameTextField.setText("");
        adminReceptionistsSurnameTextField.setText("");
        adminReceptionistsEmailTextField.setText("");
        adminReceptionistsPhoneTextField.setText("");
    }//GEN-LAST:event_adminReceptionistsAddButtonActionPerformed

    private void adminReceptionistsUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminReceptionistsUpdateButtonActionPerformed
        String id = adminReceptionistsIdTextField.getText();
        String name = adminReceptionistsNameTextField.getText();
        String surname = adminReceptionistsSurnameTextField.getText();
        String email = adminReceptionistsEmailTextField.getText();
        String phone = adminReceptionistsPhoneTextField.getText();
        String usersId = id;

        int selectedRow = adminReceptionistsTable.getSelectedRow();
        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Receptionists table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select the receptionists who you want to update.");
            }
        } else {
            service.updateReceptionist(new Receptionist(id, name, surname, email, phone, usersId));
            showReceptionist();
            JOptionPane.showMessageDialog(this, "Receptionist has been updated.");

            adminReceptionistsIdTextField.setText("");
            adminReceptionistsNameTextField.setText("");
            adminReceptionistsSurnameTextField.setText("");
            adminReceptionistsEmailTextField.setText("");
            adminReceptionistsPhoneTextField.setText("");
        }
    }//GEN-LAST:event_adminReceptionistsUpdateButtonActionPerformed

    private void adminReceptionistsDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminReceptionistsDeleteButtonActionPerformed
        String id = adminReceptionistsIdTextField.getText();
        String name = adminReceptionistsNameTextField.getText();
        String surname = adminReceptionistsSurnameTextField.getText();
        String email = adminReceptionistsEmailTextField.getText();
        String phone = adminReceptionistsPhoneTextField.getText();

        int selectedRow = adminReceptionistsTable.getSelectedRow();
        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Receptionists table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select the receptionists who you want to delete.");
            }
        } else {
            service.deleteReceptionist(id);
            showReceptionist();
            JOptionPane.showMessageDialog(this, "Receptionist has been deleted!");

            adminReceptionistsIdTextField.setText("");
            adminReceptionistsNameTextField.setText("");
            adminReceptionistsSurnameTextField.setText("");
            adminReceptionistsEmailTextField.setText("");
            adminReceptionistsPhoneTextField.setText("");
        }
    }//GEN-LAST:event_adminReceptionistsDeleteButtonActionPerformed

    private void adminReceptionistClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminReceptionistClearActionPerformed
        adminReceptionistsIdTextField.setText("");
        adminReceptionistsNameTextField.setText("");
        adminReceptionistsSurnameTextField.setText("");
        adminReceptionistsEmailTextField.setText("");
        adminReceptionistsPhoneTextField.setText("");
    }//GEN-LAST:event_adminReceptionistClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adminReceptionistClear;
    private javax.swing.JButton adminReceptionistsAddButton;
    private javax.swing.JButton adminReceptionistsDeleteButton;
    private javax.swing.JLabel adminReceptionistsEmailLabel;
    private javax.swing.JTextField adminReceptionistsEmailTextField;
    private javax.swing.JLabel adminReceptionistsIdLabel;
    private javax.swing.JTextField adminReceptionistsIdTextField;
    private javax.swing.JLabel adminReceptionistsNameLabel;
    private javax.swing.JTextField adminReceptionistsNameTextField;
    private javax.swing.JLabel adminReceptionistsPhoneLabel;
    private javax.swing.JTextField adminReceptionistsPhoneTextField;
    private javax.swing.JTextField adminReceptionistsSearchTextField;
    private javax.swing.JTextField adminReceptionistsSurnameTextField;
    private javax.swing.JTable adminReceptionistsTable;
    private javax.swing.JLabel adminReceptionistsTitleLabel;
    private javax.swing.JButton adminReceptionistsUpdateButton;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables

    private void showReceptionist() {
        model.setRowCount(0);
        List<Receptionist> receptionists = new LinkedList<>();

        receptionists = service.showReceptionist();

        if (receptionists != null) {
            for (Receptionist receptionist : receptionists) {
                Object[] willAdd = {
                    receptionist.getId(), receptionist.getName(),
                    receptionist.getSurname(), receptionist.getEmail(),
                    receptionist.getPhone(),};
                model.addRow(willAdd);
            }
        }
    }

    private void dynamicSearch(String search) {
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(model);

        adminReceptionistsTable.setRowSorter(tableRowSorter);

        tableRowSorter.setRowFilter(RowFilter.regexFilter(search));
    }
}
