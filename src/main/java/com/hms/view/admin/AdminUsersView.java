package com.hms.view.admin;

import com.hms.model.User;
import com.hms.service.HMSService;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class AdminUsersView extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    HMSService service = new HMSService();

    public AdminUsersView() {
        initComponents();
        model = (DefaultTableModel) adminUsersTable.getModel();
        showUsers();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane7 = new javax.swing.JScrollPane();
        adminUsersTable = new javax.swing.JTable();
        adminUsersPasswordLabel = new javax.swing.JLabel();
        adminUserstIdLabel = new javax.swing.JLabel();
        adminUsersIdTextField = new javax.swing.JTextField();
        adminUsersPasswordTextField = new javax.swing.JTextField();
        adminUsersSearchTextField = new javax.swing.JTextField();
        adminUsersAddButton = new javax.swing.JButton();
        adminUsersDeleteButton = new javax.swing.JButton();
        adminUsersUpdateButton = new javax.swing.JButton();
        adminUsersClearButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Users");

        adminUsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        adminUsersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminUsersTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(adminUsersTable);

        adminUsersPasswordLabel.setText("User Password       :");

        adminUserstIdLabel.setText("User ID                   :");

        adminUsersSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                adminUsersSearchTextFieldKeyReleased(evt);
            }
        });

        adminUsersAddButton.setText("Add");
        adminUsersAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminUsersAddButtonActionPerformed(evt);
            }
        });

        adminUsersDeleteButton.setText("Delete");
        adminUsersDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminUsersDeleteButtonActionPerformed(evt);
            }
        });

        adminUsersUpdateButton.setText("Update");
        adminUsersUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminUsersUpdateButtonActionPerformed(evt);
            }
        });

        adminUsersClearButton.setText("Clear");
        adminUsersClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminUsersClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(adminUsersSearchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(adminUsersPasswordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adminUsersPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(adminUserstIdLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adminUsersIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(adminUsersAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(adminUsersUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(adminUsersDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(adminUsersClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(adminUsersSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adminUsersAddButton)
                        .addComponent(adminUsersUpdateButton)
                        .addComponent(adminUsersDeleteButton)
                        .addComponent(adminUsersClearButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adminUserstIdLabel)
                        .addComponent(adminUsersIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adminUsersPasswordLabel)
                    .addComponent(adminUsersPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void adminUsersSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adminUsersSearchTextFieldKeyReleased
        String search = adminUsersSearchTextField.getText();
        dinamicSearch(search);
    }//GEN-LAST:event_adminUsersSearchTextFieldKeyReleased

    private void adminUsersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminUsersTableMouseClicked
        int selectedRow = adminUsersTable.getSelectedRow();

        adminUsersIdTextField.setText(model.getValueAt(selectedRow, 0).toString());
        adminUsersPasswordTextField.setText(model.getValueAt(selectedRow, 1).toString());
    }//GEN-LAST:event_adminUsersTableMouseClicked

    private void adminUsersAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminUsersAddButtonActionPerformed
        String id = adminUsersIdTextField.getText();
        String password = adminUsersPasswordTextField.getText();

        User user = new User(id, password);
        service.createUser(user);

        showUsers();
        JOptionPane.showMessageDialog(this, "New User has been Added!");

        adminUsersIdTextField.setText("");
        adminUsersPasswordTextField.setText("");
    }//GEN-LAST:event_adminUsersAddButtonActionPerformed

    private void adminUsersUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminUsersUpdateButtonActionPerformed
        String id = adminUsersIdTextField.getText();
        String password = adminUsersPasswordTextField.getText();

        int selectedRow = adminUsersTable.getSelectedRow();

        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Users table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select the user who you want to update.");
            }
        } else {
            service.updateUser(new User(id, password));

            showUsers();
            JOptionPane.showMessageDialog(this, "User has been updated!");

            adminUsersIdTextField.setText("");
            adminUsersPasswordTextField.setText("");
        }
    }//GEN-LAST:event_adminUsersUpdateButtonActionPerformed

    private void adminUsersDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminUsersDeleteButtonActionPerformed
        String id = adminUsersIdTextField.getText();
        String password = adminUsersPasswordTextField.getText();

        int selectedRow = adminUsersTable.getSelectedRow();

        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Users table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select the user who you want to delete.");
            }
        } else {
            service.deleteUser(id);

            showUsers();
            JOptionPane.showMessageDialog(this, "User has been deleted!");

            adminUsersIdTextField.setText("");
            adminUsersPasswordTextField.setText("");
        }
    }//GEN-LAST:event_adminUsersDeleteButtonActionPerformed

    private void adminUsersClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminUsersClearButtonActionPerformed
        adminUsersIdTextField.setText("");
        adminUsersPasswordTextField.setText("");
    }//GEN-LAST:event_adminUsersClearButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adminUsersAddButton;
    private javax.swing.JButton adminUsersClearButton;
    private javax.swing.JButton adminUsersDeleteButton;
    private javax.swing.JTextField adminUsersIdTextField;
    private javax.swing.JLabel adminUsersPasswordLabel;
    private javax.swing.JTextField adminUsersPasswordTextField;
    private javax.swing.JTextField adminUsersSearchTextField;
    private javax.swing.JTable adminUsersTable;
    private javax.swing.JButton adminUsersUpdateButton;
    private javax.swing.JLabel adminUserstIdLabel;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables

    private void dinamicSearch(String search) {
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(model);

        adminUsersTable.setRowSorter(tableRowSorter);

        tableRowSorter.setRowFilter(RowFilter.regexFilter(search));
    }

    private void showUsers() {
        model.setRowCount(0);
        List<User> users = new LinkedList<>();

        users = service.showUsers();

        if (users != null) {
            for (User user : users) {
                Object[] willAdd = {
                    user.getId(), user.getPassword()
                };
                model.addRow(willAdd);
            }
        }
    }
}
